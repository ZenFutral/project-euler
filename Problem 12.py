# The sequence of a triangle number is generated by adding the natural numbers. So the 7th triangle number
# would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. the first ten terms would be:
#       1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...
# Let us list the factors of the first seven triangle numbers:
#       1  : 1
#       3  : 1,3
#       6  : 1,2,3,6
#       10 : 1,2,5,10
#       15 : 1,3,5,15
#       21 : 1,3,7,21
#       28 : 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
# Answer: 76576500
# Average Runtime: 40.168s

from time import time
from statistics import mean
from math import sqrt

def nextTriangleNumber(triangleNumbers : list[int]):
    newTriNum = triangleNumbers[-1] + len(triangleNumbers) + 1
    return(newTriNum)

def getDivisorCount(number : int):
    upperBound = int(sqrt(number)) + 1
    counter = 1
    divisors = [1, number]

    for counter in range(1,upperBound):
        if counter in divisors:
            continue

        if number % counter == 0:
            divisors.append(counter)
            divisors.append(number / counter)

    return len(divisors)

def run():
    divisorCount = 0
    triNums = [1]

    while divisorCount < 500:
        triNums.append(nextTriangleNumber(triNums))
        
        currentTriNum = triNums[-1]
        divisorCount = getDivisorCount(currentTriNum)

    answer = currentTriNum
    return answer

# ================================
# NO PROBLEM LOGIC BELOW THIS LINE
# ================================

runCount = 10
runDurations = []
masterStart = time()

for count in range(runCount):
    print(f"Run: {count + 1} --- Current Runtime: {round(time() - masterStart, 3)}")
    print(f"")
    startTime = time()
    answer = run()
    runDurations.append(time() - startTime)

averageRuntime = mean(runDurations)
print("===================")
print(f"Answer: {answer}")
print(f"Runtime: {round(averageRuntime, 3)}s")
    
