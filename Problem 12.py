# The sequence of a triangle number is generated by adding the natural numbers. So the 7th triangle number
# would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. the first ten terms would be:
#       1, 3, 6, 10, 15, 21, 28, 36, 45, 55,...
# Let us list the factors of the first seven triangle numbers:
#       1  : 1
#       3  : 1,3
#       6  : 1,2,3,6
#       10 : 1,2,5,10
#       15 : 1,3,5,15
#       21 : 1,3,7,21
#       28 : 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
# Answer: 76576500
# Average Runtime: 28.938s

from custom_modules.script_report import reporter
from math import sqrt

def nextTriangleNumber(tri_num_list : list[int]) -> int:
    new_tri_num = tri_num_list[-1] + len(tri_num_list) + 1
    return(new_tri_num)

def getDivisorCount(number : int) -> int:
    upper_bound: int = int(sqrt(number)) + 1
    counter: int = 1
    divisors: list[int] = [1, number]

    for counter in range(1,upper_bound):
        if counter in divisors:
            continue

        if number % counter == 0:
            divisors.append(counter)
            divisors.append(int(number / counter))

    return len(divisors)

def main() -> int:
    divisor_count: int = 0
    tri_num_list: list[int] = [1]

    while divisor_count < 500:
        tri_num_list.append(nextTriangleNumber(tri_num_list))
        
        current_tri_num = tri_num_list[-1]
        divisor_count = getDivisorCount(current_tri_num)

    answer: int = current_tri_num
    return answer

reporter(main_function= main)    
